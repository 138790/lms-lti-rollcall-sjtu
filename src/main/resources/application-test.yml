#tomcat配置
server:
  port: 8082
  servlet:
    context-path: /lms-lti-rollcall-sjtu-test
    sign: 123456
#日志配置
logging:
  file:
    name: /opt/lms-lti-rollcall-sjtu-test/lms-lti-rollcall-sjtu.log
  pattern:
    level: DEBUG

  #用于移除swagger example error异常
  level:
    io:
      swagger:
        models:
          parameters:
            AbstractSerializableParameter: error

spring:
   #应用名称
  application:
    name: lms-lti-rollcall-sjtu-test

  main:
     #当遇到同样名字的依赖时，是否允许覆盖注册（默认是false，遇到冲突启动报错）
    allow-bean-definition-overriding: false


 #http配置
  http:
    encoding:
      charset: utf-8
      force: true
      enabled: true


  #数据源配置
  datasource:
    #alibaba连接池配置
    druid:
      #jdbc配置
      url: jdbc:postgresql://172.168.70.11:5432/lms_lti_rollcall_sjtu_dev?useUnicode=true&characterEncoding=utf8&useSSL=false
      username: dbuser
      password: 1q2w3e4r5t
      driver-class-name: org.postgresql.Driver
      #连接池配置
      #连接池最大空间
      initial-size: 5
      #可用连接实例的最大数目
      max-active:  100
      #空闲连接实例的最小数目
      min-idle: 5
      #最大等待时间
      max-wait: 60000
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
#      #验证连接有效性
#      validation-query: SELECT 1 FROM DUAL
#      #验证有效性的超时时间
#      validation-query-timeout: 60000
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 100000

  #redis配置
  redis:
    #好像是库的标号，通过标号可以切换redis缓存
    database: 1
    host: 172.168.70.90
    port: 6379
    #password: 900412
    timeout: 20000
    #是否启用SSL协议支持
    ssl: false
    jedis:
      pool:
        #持在给定时间可以分配的最大连接数。使用负值表示无限制
        max-active: 8
        #池中“空闲”连接的最大数量。使用负值表示无限制
        max-idle: 8
        #目标是池中维护的最小空闲连接数。此设置仅在期为正数时才有效
        min-idle: 0
        #当池耗尽时，在抛出异常之前连接分配应该阻塞的最长时间。使用负值表示无限期阻止
        max-wait: -1

  #文件上传
  servlet:
    multipart:
      enabled: true
      max-file-size: 30MB
      max-request-size: 30MB

  #quartz配置
  quartz:
    #相关属性配置
    properties:
      org:
        quartz:
          #Scheduler调度器属性配置
          scheduler:
            #调度标识名,集群中每一个实例都必须使用相同的名称
            instanceName: ClusteredScheduler
            #ID设置为自动获取,每一个必须不同
            instanceId: AUTO
          #配置JobStore
          jobStore:
            #数据保存方式为数据库持久化
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            #数据库代理类，一般org.quartz.impl.jdbcjobstore.StdJDBCDelegate可以满足大部分数据库
            driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
            #表的前缀，默认QRTZ_
            tablePrefix: QRTZ_
            #是否加入集群
            isClustered: true
            #调度实例失效的检查时间间隔ms
            clusterCheckinInterval: 10000
            # JobDataMaps是否都为String类型，默认false
            useProperties: false
            #Trigger的下次触发时间在当前时间之前，按理该定时任务是过期的，但为再给一个机会，会把下次触发时间减去这个misfireThreshold值，稍微提前后还是过期才最终认定为过期并销毁。不设该值的话，默认就是60秒
            misfireThreshold: 60000
            #当设置为“true”时，此属性告诉Quartz在非托管JDBC连接上调用setTransactionIsolation（Connection.TRANSACTION_READ_COMMITTED）。
            txIsolationLevelReadCommitted: true
          #配置ThreadPool
          threadPool:
            #线程池的实现类（一般使用SimpleThreadPool即可满足几乎所有用户的需求）
            class: org.quartz.simpl.SimpleThreadPool
            #指定线程数一般设置为1-100直接的整数，根据系统资源配置
            threadCount: 100
            #设置线程的优先级(可以是Thread.MIN_PRIORITY（即1）和Thread.MAX_PRIORITY（这是10）之间的任何int 。默认值为Thread.NORM_PRIORITY（5）。)
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
    #数据库方式
    job-store-type: jdbc

#mybatis配置
mybatis:
  #指定Dao层出入参所在的包进行自动扫描，实现mapper.xml类名简写
  configuration:
     #驼峰写法对应数据库字段的下划线
    map-underscore-to-camel-case: true
    #数据大小
    default-fetch-size: 100
    #超时时间
    default-statement-timeout: 30
    #打印执行的SQL语句
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  #指定mapper.xml资源路径
  mapper-locations: classpath:mapper/*.xml


#pagehelper分页插件配置
pagehelper:
   #连接的数据库类型
  helper-dialect: postgresql
   #设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是Page类型）
  page-size-zero: true
  #设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用，和startPage中的pageNum效果一样
  offset-as-page-num: true
 #设置为true时，使用RowBounds分页会进行count查询
  row-bounds-with-count: true
   #启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql


#canvas系统地址
feign:
  #是否用Apach的httpclient替换掉了jdk原生的UrlConnection
  #  httpclient:
  #    enabled: true
  #自定义canvas远程服务属性
  client:
    application-name: canvas
    url: http://172.168.70.11:8765
    supper-admin-token: Bearer bEfZ4PnUBOUizzUYYj0bVYhuxHuBx1cKwnQx2w2ffXzMPmzgSsVaaUVRQcOhFEN0

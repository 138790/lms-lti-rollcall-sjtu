<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com</groupId>
    <artifactId>lms-lti-rollcall-sjtu</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>lms-lti-rollcall-sjtu</name>
    <description>签到系统</description>

    <properties>
        <java.version>13</java.version>
        <spring-boot-starter-web.version>2.2.0.RELEASE</spring-boot-starter-web.version>
        <spring-boot-starter-data-redis.version>2.2.0.RELEASE</spring-boot-starter-data-redis.version>
        <spring-boot-starter-websocket.version>2.2.0.RELEASE</spring-boot-starter-websocket.version>
        <spring-boot-starter-quartz.version>2.2.0.RELEASE</spring-boot-starter-quartz.version>
        <spring-boot-starter-test.version>2.2.0.RELEASE</spring-boot-starter-test.version>
        <spring-boot-maven-plugin.version>2.2.0.RELEASE</spring-boot-maven-plugin.version>
        <spring-cloud-starter-openfeign.version>2.2.0.RELEASE</spring-cloud-starter-openfeign.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <mybatis-spring-boot-starter.version>2.1.1</mybatis-spring-boot-starter.version>
        <pagehelper-spring-boot-starter.version>1.2.12</pagehelper-spring-boot-starter.version>
        <druid-spring-boot-starter.version>1.1.20</druid-spring-boot-starter.version>
        <postgresql.version>42.2.8</postgresql.version>
        <redisson.version>3.11.5</redisson.version>
        <java-jwt.version>3.8.3</java-jwt.version>
        <basiclti-util.version>1.2.0</basiclti-util.version>
        <fastjson.version>1.2.62</fastjson.version>
        <swagger.version>2.9.2</swagger.version>
        <jaxb-api.version>2.4.0-b180830.0359</jaxb-api.version>
        <commons-codec.version>1.13</commons-codec.version>
    </properties>


    <dependencies>
        <!--spring boot包 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot-starter-web.version}</version>
        </dependency>

        <!--mybatis框架 -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis-spring-boot-starter.version}</version>
        </dependency>

        <!--分页插件 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>${pagehelper-spring-boot-starter.version}</version>
        </dependency>

        <!--postgresql数据库依赖 -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>

        <!--alibaba连接池包 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>${druid-spring-boot-starter.version}</version>
        </dependency>

        <!--redis包 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <version>${spring-boot-starter-data-redis.version}</version>
        </dependency>

        <!-- Redisson(redis分布式锁工具) -->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson</artifactId>
            <version>${redisson.version}</version>
        </dependency>

        <!-- FeignClient远程接口调用 -->
        <!--注意此处的依赖是SpringBoot2.0以后专用的，如果您使用的SpringBoot版本低于2.0请使用spring-cloud-starter-feign-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
            <version>${spring-cloud-starter-openfeign.version}</version>
        </dependency>
        <!-- 新的CloudFinchley.RC2版中这不需要这个包了。FeignClient缺乏连接池的支持，在达到一定流量的后服务肯定出问题，所以用Apach的httpclient替换掉了jdk中HttpURLConnection原生的UrlConnection -->
        <!--        <dependency>-->
        <!--            <groupId>io.github.openfeign</groupId>-->
        <!--            <artifactId>feign-httpclient</artifactId>-->
        <!--                <version>10.2.3</version>-->
        <!--        </dependency>-->

        <!--JWT Token验证依赖包-->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>${java-jwt.version}</version>
        </dependency>

        <!--webSocket包 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
            <version>${spring-boot-starter-websocket.version}</version>
        </dependency>

        <!--webdevtools热部署包 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!--lombok包 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!--LTI依赖包，用于完成对签名的认证工作，用于外部应用接入canvas系统-->
        <dependency>
            <groupId>org.imsglobal</groupId>
            <artifactId>basiclti-util</artifactId>
            <version>${basiclti-util.version}</version>
        </dependency>

        <!--fastjson包 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>

        <!--swagger2-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <!--xmlModelPlugin  JDK9引入了模块概念，所以9对JDK6、7、8的有些API都进行了一定的抛弃，不再整合在java.se的模块中。然而swagger2配置类需要xmlModelPlugin支持-->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>${jaxb-api.version}</version>
        </dependency>

        <!--Apache common工具包 -->
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>

        <!--Quartz定时任务 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-quartz</artifactId>
            <version>${spring-boot-starter-quartz.version}</version>
        </dependency>
        <!--		<dependency>-->
        <!--			<groupId>org.quartz-scheduler</groupId>-->
        <!--			<artifactId>quartz</artifactId>-->
        <!--			<version>${quartz.version}</version>-->
        <!--		</dependency>-->


        <!--spring boot单元测试包 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot-starter-test.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>


    <build>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <!--扫描src/main/java/下的所有properties和xml文件-->
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <!--将所扫描文件中的${}引用在打包时换成直接引用-->
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <!--扫描src/main/resources/下的所有xml文件-->
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                </includes>
                <!--将所扫描文件中的${}引用在打包时换成直接引用-->
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot-maven-plugin.version}</version>
                <configuration>
                    <mainClass>com.lmsltirollcallsjtu.LmsLtiRollcallSjtuApplication</mainClass>
                    <layout>JAR</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <!--使用jdk13进行编译-->
                    <release>${java.version}</release>
                    <fork>true</fork>
                    <!--是否跳过test模块-->
                    <skip>true</skip>
                    <!--开启预览功能(默认是关闭的)：jdk预先发行的一些功能，比如switch、文本块等功能-->
                    <compilerArgs>--enable-preview</compilerArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>
